library(tidyverse)
library(geepack)
library(mgcv)
library(parallel)
clusbootglm_sample_glm <- function(f, i, Obsno, model, family, data, p, res.or) {
j <- f[, i]
obs <- unlist(Obsno[j])
coef <- rep(NA, p) # added
bootcoef <- tryCatch(coef(glm(model, family = family, data = data[obs, ])),
warning = function(x) rep(as.numeric(NA), p)
)
ifelse(length(bootcoef) == p, coef <- as.vector(bootcoef), coef[which(names(res.or$coef) %in% names(bootcoef))] <- bootcoef)
return(coef)
}
my_clusbootglm <- function(model, data, clusterid, family = gaussian, B = 5000,
confint.level = 0.95, n.cores = 1) {
tt_cores <- detectCores()
if (n.cores > tt_cores) {
message(sprintf(
"Note: \"n.cores\" was set to %d, but only %d are available. Using all cores.",
n.cores, tt_cores
))
}
model <- as.formula(model)
res.or <- glm(model, family = family, data = data)
confint.pboundaries <- c((1 - confint.level) / 2, 1 - (1 - confint.level) / 2)
confint.Zboundaries <- qnorm(confint.pboundaries)
n <- nrow(data)
p <- length(res.or$coef)
coefs <- matrix(NA, nrow = B, ncol = p)
arguments <- as.list(match.call())
clusterid <- eval(arguments$clusterid, data)
cluster <- as.character(clusterid)
clusters <- unique(cluster)
Obsno <- split(1:n, cluster)
f <- matrix(clusters, length(clusters), B)
ff <- matrix(f, prod(dim(f)), 1)
fff <- sample(ff)
f <- matrix(fff, length(clusters), B)
if (is.numeric(n.cores) & n.cores > 0) {
if (n.cores == 1) {
for (i in 1:B) {
j <- f[, i]
obs <- unlist(Obsno[j])
bootcoef <- tryCatch(coef(glm(model,
family = family,
data = data[obs, ]
)), warning = function(x) {
rep(
as.numeric(NA),
p
)
})
coefs[i, which(names(res.or$coef) %in% names(bootcoef))] <- bootcoef
}
}
if (n.cores > 1) {
cl <- makeCluster(max(min(n.cores, tt_cores), 2))
previous_RNGkind <- RNGkind()[1]
RNGkind("L'Ecuyer-CMRG")
nextRNGStream(.Random.seed)
clusterExport(cl,
varlist = c(
"f", "Obsno",
"model", "family", "data",
"p", "res.or", "clusbootglm_sample_glm"
),
envir = environment()
)
splitclusters <- 1:B
out <- parSapplyLB(cl, splitclusters, function(x) {
clusbootglm_sample_glm(
f,
x, Obsno, model, family, data, p, res.or
)
})
coefs <- t(out)
stopCluster(cl)
RNGkind(previous_RNGkind)
}
}
invalid.samples <- colSums(is.na(coefs))
names(invalid.samples) <- colnames(coefs) <- names(res.or$coef)
samples.with.NA.coef <- which(is.na(rowSums(coefs)))
sdcoefs <- apply(coefs, 2, sd, na.rm = TRUE)
result <- list(
call = match.call(), model = model, family = family,
B = B, coefficients = coefs, data = data, bootstrap.matrix = f,
subject.vector = clusterid, lm.coefs = res.or$coef, boot.coefs = colMeans(coefs,
na.rm = TRUE
), boot.sds = sdcoefs, ci.level = confint.level
)
class(result) <- "clusbootglm"
return(result)
}
load(
"~/University of Michigan Dropbox/Jitao Wang/ihs_data/2018/imputed_data/2018_imputed_data_daily_hr.RData"
)
dat <- impute_list[[9]]$full_data_complete %>%
select(-c(NOTIFICATION_TYPE, date_day)) %>%
mutate(week_category = if_else(week_category == "unsure", "None", week_category)) %>%
group_by(USERID, study_week, week_category, specialty) %>%
summarise(across(everything(), ~ mean(.x))) %>%
ungroup() %>%
mutate(msg_sent = 0 + (week_category != "None")) %>%
left_join(impute_list[[1]]$all_baseline)
##########################################
tmp <- dat %>% mutate(msg_sent = (week_category == "activity") + 0)
formula_backbone <- "~ study_week * msg_sent + Sex + PHQtot0 + Neu0 + depr0 + EFE0 + pre_intern_step_count + pre_intern_sleep_count + pre_intern_resting_hr + pre_intern_rmssd"
all_mediators <- c("STEP_COUNT", "SLEEP_COUNT", "resting_hr", "rmssd")
res <- tibble()
for (i in 1:length(all_mediators)) {
mediator <- all_mediators[i]
print(mediator)
f <- paste(mediator, formula_backbone, "+", paste(all_mediators[-i], collapse = " + "), sep = " ")
f <- as.formula(f)
fit <- geeglm(f, data = tmp, id = USERID, corstr = "i")
result <- my_clusbootglm(f,
data = tmp, family = gaussian(link = "identity"), clusterid = USERID, B = 1000, n.cores = 8
)
v <- result$coefficients
res0 <- t(rbind(
result$lm.coefs["msg_sent"] + 0:25 * result$lm.coefs["study_week:msg_sent"],
apply(replicate(26, v[, "msg_sent"]) + sapply(0:25, function(i) i * v[, "study_week:msg_sent"]),
2,
FUN = function(x) quantile(x, c(0.025, 0.975))
)
)) %>% data.frame()
colnames(res0) <- c("effect", "effect_lb", "effect_ub")
res0 <- res0 %>%
tibble() %>%
mutate(week = 0:25, response = rep(mediator, 26))
res <- res %>% bind_rows(res0)
}
